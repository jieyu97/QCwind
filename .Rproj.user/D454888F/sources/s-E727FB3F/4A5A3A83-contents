# IDW part
wow_station_order
wow_spatial_nbhd

# set empty matrix
estimation_idw_emd_mat = matrix(NA, nrow = 157825, ncol = 39) # estimation 1
estimation_idw_rmse_mat = estimation_idw_emd_mat # estimation 2
sd_idw_emd_mat = estimation_idw_emd_mat # nbhd sd 1
sd_idw_rmse_mat = estimation_idw_emd_mat # nbhd sd 2

spatial_emd_ws = spatial_ws
spatial_emd_flag = spatial_ws
spatial_rmse_ws = spatial_ws
spatial_rmse_flag = spatial_ws


estimation_idw_emd_mat_bad = estimation_idw_emd_mat
sd_idw_emd_mat_bad = sd_idw_emd_mat
spatial_emd_ws_bad = spatial_emd_ws
spatial_emd_flag_bad = spatial_emd_flag
########################3 huge loop over WOW stations
# EMD
Sys.time()
for (k in 1:38 ) {
  i = wow_station_order[k]
  # observation WOW
  observation = spatial_emd_ws[,i] # spatial_emd_ws spatial_ws
  
  estimation_idw_emd = as.numeric(matrix(NA, nrow = 1, ncol = 157825)) # estimation 1
  sd_idw_emd = estimation_idw_emd # nbhd sd 1
  
  nbhd_label = wow_spatial_nbhd[[k]]
  weight_emd = ( emd_radius^2 - ( emd_matrix_ws[i,nbhd_label] )^2 ) / # dist_rmse_ws emd_matrix_ws
    ( emd_radius^2 + ( emd_matrix_ws[i,nbhd_label] )^2 ) # rmse_radius emd_radius
  
  for (t in which(!is.na(observation)) ) {
    # get nbhd wind speed & weight
    nbhd_infomation = cbind(nbhd_label, weight_emd, 1)
    nbhd_infomation[,3] = as.numeric( spatial_emd_ws[t,nbhd_label] ) # spatial_emd_ws spatial_ws

    if ( sum(!is.na(nbhd_infomation[,3])) < 3 ) {
      estimation_idw_emd[t] = NA
      sd_idw_emd[t] = NA
    } else {
      estimation_idw_emd[t] = sum( nbhd_infomation[,3] * nbhd_infomation[,2], na.rm = TRUE ) / 
        sum( nbhd_infomation[!is.na(nbhd_infomation[,3]),2] )
      sd_idw_emd[t] = sd( nbhd_infomation[,3], na.rm = TRUE )
    }
  }
  
  flag_after_emd = ifelse( observation > (estimation_idw_emd + 2*sd_idw_emd) | 
                             observation < (estimation_idw_emd - 2*sd_idw_emd), 
                           1, 0 )
  obs_after_emd = ifelse( observation > (estimation_idw_emd + 2*sd_idw_emd) | 
                            observation < (estimation_idw_emd - 2*sd_idw_emd), 
                          NA, observation )
  
  estimation_idw_emd_mat[,i] = estimation_idw_emd
  sd_idw_emd_mat[,i] = sd_idw_emd
  spatial_emd_ws[,i] = obs_after_emd
  spatial_emd_flag[,i] = flag_after_emd
  print(k)
}
Sys.time()

# RMSE
Sys.time()
for (k in 1:38 ) {
  i = wow_station_order[k]
  # observation WOW
  observation = spatial_rmse_ws[,i]
  
  estimation_idw_emd = as.numeric(matrix(NA, nrow = 1, ncol = 157825)) # estimation 1
  sd_idw_emd = estimation_idw_emd # nbhd sd 1
  
  nbhd_label = wow_spatial_nbhd[[k]]
  weight_emd = ( rmse_radius^2 - ( dist_rmse_ws[i,nbhd_label] )^2 ) / # dist_rmse_ws emd_matrix_ws
    ( rmse_radius^2 + ( dist_rmse_ws[i,nbhd_label] )^2 ) # rmse_radius emd_radius
  
  for (t in which(!is.na(observation)) ) {
    # get nbhd wind speed & weight
    nbhd_infomation = cbind(nbhd_label, weight_emd, 1)
    nbhd_infomation[,3] = as.numeric( spatial_rmse_ws[t,nbhd_label] )
    
    if ( sum(!is.na(nbhd_infomation[,3])) <= 3 ) {
      estimation_idw_emd[t] = NA
      sd_idw_emd[t] = NA
    } else {
      estimation_idw_emd[t] = sum( nbhd_infomation[,3] * nbhd_infomation[,2], na.rm = TRUE ) / 
        sum( nbhd_infomation[!is.na(nbhd_infomation[,3]),2] )
      sd_idw_emd[t] = sd( nbhd_infomation[,3], na.rm = TRUE )
    }
  }
  
  flag_after_emd = ifelse( observation > (estimation_idw_emd + 2*sd_idw_emd) |
                             observation < (estimation_idw_emd - 2*sd_idw_emd), 
                           1, 0 )
  obs_after_emd = ifelse( observation > (estimation_idw_emd + 2*sd_idw_emd) |
                            observation < (estimation_idw_emd - 2*sd_idw_emd), 
                          NA, observation )
  
  estimation_idw_rmse_mat[,i] = estimation_idw_emd
  sd_idw_rmse_mat[,i] = sd_idw_emd
  spatial_rmse_ws[,i] = obs_after_emd
  spatial_rmse_flag[,i] = flag_after_emd
  print(k)
}
Sys.time()








######################################## done

##########################################################
i = spatial_nbhd_info_order[1,3]
label_nbhd = which(spatial_distance[,i] <= radius & spatial_distance[,i] != 0)
# similarity, nbhd ordering
similar_nbhd_info = matrix(NA, nrow = length(label_nbhd), ncol = 4)
colnames(similar_nbhd_info) = c('nbhd_label','w0k1','rmse','correlation')
similar_nbhd_info[,1] = label_nbhd
similar_nbhd_info[,2] = spatial_information$w0k1[label_nbhd]
for (j in 1:length(label_nbhd) ) {
  similar_nbhd_info[j,3] = sqrt(mean((spatial_ws[,i] - spatial_ws[,label_nbhd[j]])^2, na.rm = TRUE))
  similar_nbhd_info[j,4] = cor(spatial_ws[,i], spatial_ws[,label_nbhd[j]],
                               use = 'pairwise.complete.obs', method = 'pearson')
}
similar_nbhd_info_sort = similar_nbhd_info[which(similar_nbhd_info[,4] >= 0.5),]
similar_nbhd_info_order = similar_nbhd_info_sort[order(similar_nbhd_info_sort[,3]),]

# observation WOW
observation = spatial_ws[,i]

# 1. IDW: EMD distance and RMSE distance
estimation_idw_emd = as.numeric(matrix(NA, nrow = 1, ncol = 157825)) # estimation 1
estimation_idw_rmse = estimation_idw_emd # estimation 2
sd_idw_emd = estimation_idw_emd # nbhd sd 1
sd_idw_rmse = estimation_idw_emd # nbhd sd 2
rmse_radius = 4
nbhd_long_order = similar_nbhd_info_order[,1]
weight_emd = ( radius^2 - ( spatial_distance[i,nbhd_long_order] )^2 ) / 
  ( radius^2 + ( spatial_distance[i,nbhd_long_order] )^2 )
weight_rmse = ( rmse_radius^2 - ( similar_nbhd_info_order[,3] )^2 ) / 
  ( rmse_radius^2 + ( similar_nbhd_info_order[,3] )^2 )
# loop over time
for (t in which(!is.na(observation)) ) {
  # get nbhd wind speed
  nbhd_infomation = cbind(similar_nbhd_info_order,weight_emd,weight_rmse,1)
  nbhd_infomation[,7] = as.numeric( spatial_ws[t,nbhd_long_order] )
  # geo weight estimation
  nbhd_infomation_emd = nbhd_infomation[order(nbhd_infomation[,5], decreasing = TRUE),]
  nbhd_short_emd = which(!is.na(nbhd_infomation_emd[,7]))[1:5]
  estimation_idw_emd[t] = sum( nbhd_infomation_emd[nbhd_short_emd,5] * 
                                 nbhd_infomation_emd[nbhd_short_emd,7], 
                               na.rm = TRUE ) / sum( nbhd_infomation_emd[nbhd_short_emd,5] )
  sd_idw_emd[t] = sd( nbhd_infomation_emd[nbhd_short_emd,7], na.rm = TRUE )
  # rmse weight estimation
  nbhd_infomation_rmse = nbhd_infomation[order(nbhd_infomation[,6], decreasing = TRUE),]
  nbhd_short_rmse = which(!is.na(nbhd_infomation_rmse[,7]))[1:5]
  estimation_idw_rmse[t] = sum( nbhd_infomation_rmse[nbhd_short_rmse,6] * 
                                  nbhd_infomation_rmse[nbhd_short_rmse,7], 
                                na.rm = TRUE ) / sum( nbhd_infomation_rmse[nbhd_short_rmse,6] )
  sd_idw_rmse[t] = sd( nbhd_infomation_rmse[nbhd_short_rmse,7], na.rm = TRUE )
}

# get values for all
estimation_idw_emd_mat[,i] = estimation_idw_emd # estimation 1
estimation_idw_rmse_mat[,i] = estimation_idw_rmse # estimation 2
sd_idw_emd_mat[,i] = sd_idw_emd # nbhd sd 1
sd_idw_rmse_mat[,i] = sd_idw_rmse # nbhd sd 2

# error_emd = abs(observation - estimation_idw_emd)
# error_rmse = abs(observation - estimation_idw_rmse)

flag_after_emd = ifelse( observation <= (estimation_idw_emd + 3*sd_idw_emd) & 
                           observation >= (estimation_idw_emd - 3*sd_idw_emd), 
                         0, 1 )
obs_after_emd = ifelse( observation <= (estimation_idw_emd + 3*sd_idw_emd) & 
                          observation >= (estimation_idw_emd - 3*sd_idw_emd), 
                        observation, NA )

flag_after_rmse = ifelse( observation <= (estimation_idw_rmse + 3*sd_idw_rmse) & 
                            observation >= (estimation_idw_rmse - 3*sd_idw_rmse), 
                          0, 1 )
obs_after_rmse = ifelse( observation <= (estimation_idw_rmse + 3*sd_idw_rmse) & 
                           observation >= (estimation_idw_rmse - 3*sd_idw_rmse), 
                         observation, NA )

spatial_ws[,i]

Sys.time()
save.image("~/Documents/Rworkspace/wow_200519_spatial.RData")
Sys.time()

# plot
spatial_idw = as.data.frame(cbind(observation, estimation_idw_rmse, estimation_idw_emd))
idw_rmse = ggplot(spatial_idw, aes(estimation_idw_rmse, observation) ) +
  geom_bin2d(binwidth = c(0.5, 0.5)) +
  geom_abline(colour = 'darkred') +
  scale_fill_gradientn(trans = "log", breaks = c(1,8,60,400,1500), colours = terrain.colors(5)) +
  theme_bw()
idw_emd = ggplot(spatial_idw, aes(estimation_idw_emd, observation) ) +
  geom_bin2d(binwidth = c(0.5, 0.5)) +
  geom_abline(colour = 'darkred') +
  scale_fill_gradientn(trans = "log", breaks = c(1,8,60,400,1500), colours = terrain.colors(5)) +
  theme_bw()
grid.arrange(idw_rmse, idw_emd, ncol = 2)



save.image("~/Documents/Rworkspace/wow_200519_spatial.RData")


### IDW

# set empty matrix
estimation_idw_emd_mat = matrix(NA, nrow = 157825, ncol = 38) # estimation 1
estimation_idw_rmse_mat = estimation_idw_emd_mat # estimation 2
sd_idw_emd_mat = estimation_idw_emd_mat # nbhd sd 1
sd_idw_rmse_mat = estimation_idw_emd_mat # nbhd sd 2

# huge loop over WOW stations
for (i in spatial_nbhd_info_order[,3] )
{
}

# observation WOW
observation = spatial_ws[,i]
# 1. IDW: geographical distance and RMSE distance
estimation_idw_emd = as.numeric(matrix(NA, nrow = 1, ncol = 157825)) # estimation 1
estimation_idw_rmse = estimation_idw_emd # estimation 2
sd_idw_emd = estimation_idw_emd # nbhd sd 1
sd_idw_rmse = estimation_idw_emd # nbhd sd 2
rmse_radius = 4
nbhd_long_order = similar_nbhd_info_order[,1]
weight_emd = ( radius^2 - ( spatial_distance[i,nbhd_long_order] )^2 ) / 
  ( radius^2 + ( spatial_distance[i,nbhd_long_order] )^2 )
weight_rmse = ( rmse_radius^2 - ( similar_nbhd_info_order[,3] )^2 ) / 
  ( rmse_radius^2 + ( similar_nbhd_info_order[,3] )^2 )
# loop over time
for (t in which(!is.na(observation)) ) {
  # get nbhd wind speed
  nbhd_infomation = cbind(similar_nbhd_info_order,weight_emd,weight_rmse,1)
  nbhd_infomation[,7] = as.numeric( spatial_ws[t,nbhd_long_order] )
  # geo weight estimation
  nbhd_infomation_emd = nbhd_infomation[order(nbhd_infomation[,5], decreasing = TRUE),]
  nbhd_short_emd = which(!is.na(nbhd_infomation_emd[,7]))[1:5]
  estimation_idw_emd[t] = sum( nbhd_infomation_emd[nbhd_short_emd,5] * 
                                 nbhd_infomation_emd[nbhd_short_emd,7], 
                               na.rm = TRUE ) / sum( nbhd_infomation_emd[nbhd_short_emd,5] )
  sd_idw_emd[t] = sd( nbhd_infomation_emd[nbhd_short_emd,7], na.rm = TRUE )
  # rmse weight estimation
  nbhd_infomation_rmse = nbhd_infomation[order(nbhd_infomation[,6], decreasing = TRUE),]
  nbhd_short_rmse = which(!is.na(nbhd_infomation_rmse[,7]))[1:5]
  estimation_idw_rmse[t] = sum( nbhd_infomation_rmse[nbhd_short_rmse,6] * 
                                  nbhd_infomation_rmse[nbhd_short_rmse,7], 
                                na.rm = TRUE ) / sum( nbhd_infomation_rmse[nbhd_short_rmse,6] )
  sd_idw_rmse[t] = sd( nbhd_infomation_rmse[nbhd_short_rmse,7], na.rm = TRUE )
}

# get values for all
estimation_idw_emd_mat[,i] = estimation_idw_emd # estimation 1
estimation_idw_rmse_mat[,i] = estimation_idw_rmse # estimation 2
sd_idw_emd_mat[,i] = sd_idw_emd # nbhd sd 1
sd_idw_rmse_mat[,i] = sd_idw_rmse # nbhd sd 2


# plot
spatial_idw = as.data.frame(cbind(observation, estimation_idw_rmse, estimation_idw_emd))
idw_rmse = ggplot(spatial_idw, aes(estimation_idw_rmse, observation) ) +
  geom_bin2d(binwidth = c(0.5, 0.5)) +
  geom_abline(colour = 'darkred') +
  scale_fill_gradientn(trans = "log", breaks = c(1,8,60,400,1500), colours = terrain.colors(5)) +
  theme_bw()
idw_emd = ggplot(spatial_idw, aes(estimation_idw_emd, observation) ) +
  geom_bin2d(binwidth = c(0.5, 0.5)) +
  geom_abline(colour = 'darkred') +
  scale_fill_gradientn(trans = "log", breaks = c(1,8,60,400,1500), colours = terrain.colors(5)) +
  theme_bw()
grid.arrange(idw_rmse, idw_emd, ncol = 2)

library(hydroGOF)
gof(observation,estimation_idw_rmse,na.rm = TRUE)
gof(observation,estimation_idw_emd,na.rm = TRUE)

# residual
res_rmse = estimation_idw_rmse - observation
res_emd = estimation_idw_emd - observation
idw_res = as.data.frame(cbind(res_rmse, res_emd))
mu_rmse = mean(res_rmse, na.rm = TRUE)
mu_emd = mean(res_emd, na.rm = TRUE)
sigma_rmse = sd(res_rmse, na.rm = TRUE)
sigma_emd = sd(res_emd, na.rm = TRUE)
mu_rmse + 2*sigma_rmse
mu_rmse - 2*sigma_rmse
mu_emd + 2*sigma_emd
mu_emd - 2*sigma_emd


res_idw_rmse = ggplot(idw_res) + theme_bw() +
  geom_histogram(aes(res_rmse), fill = 'steelblue', alpha = 0.8) + 
  geom_vline(xintercept = (mu_rmse + 2*sigma_rmse), color = 'darkred', linetype = 'dashed') +
  geom_vline(xintercept = (mu_rmse - 2*sigma_rmse), color = 'darkred', linetype = 'dashed')
res_idw_emd = ggplot(idw_res) + theme_bw() +
  geom_histogram(aes(res_emd), fill = 'steelblue', alpha = 0.8) + 
  geom_vline(xintercept = (mu_emd + 2*sigma_emd), color = 'darkred', linetype = 'dashed') +
  geom_vline(xintercept = (mu_emd - 2*sigma_emd), color = 'darkred', linetype = 'dashed')
grid.arrange(res_idw_rmse, res_idw_emd, ncol = 2)

res_idw_rmse = ggplot(idw_res,aes(res_rmse)) + theme_bw() +
  geom_density(kernel = "gaussian") + 
  geom_vline(xintercept = (mu_rmse + 2*sigma_rmse), color = 'darkred', linetype = 'dashed') +
  geom_vline(xintercept = (mu_rmse - 2*sigma_rmse), color = 'darkred', linetype = 'dashed')
res_idw_emd = ggplot(idw_res,aes(res_emd)) + theme_bw() +
  geom_density(kernel = "gaussian") + 
  geom_vline(xintercept = (mu_emd + 2*sigma_emd), color = 'darkred', linetype = 'dashed') +
  geom_vline(xintercept = (mu_emd - 2*sigma_emd), color = 'darkred', linetype = 'dashed')
grid.arrange(res_idw_rmse, res_idw_emd, ncol = 2)
#########






############################################################## 3. ssrt
nhour = 4
twindow = 6*nhour
# set empty matrix
estimation_srt_mat = matrix(NA, nrow = 157825, ncol = 39) # estimation 3
sd_srt_mat = estimation_srt_mat # nbhd sd 3

# big loop
time_window = 24
spatial_srt_ws = spatial_ws
spatial_srt_flag = spatial_ws

Sys.time()
for (k in 1:38 )
{
  i = wow_station_order[k]
  # observation WOW
  observation = spatial_srt_ws[,i]
  estimation_srt = as.numeric(matrix(NA, nrow = 1, ncol = 157825)) # estimation 3
  sd_srt = estimation_srt # nbhd sd 3
  
  nbhd_label = wow_spatial_nbhd[[k]]
  weight_srt = ( emd_radius^2 - ( emd_matrix_ws[i,nbhd_label] )^2 ) / # dist_rmse_ws emd_matrix_ws
    ( emd_radius^2 + ( emd_matrix_ws[i,nbhd_label] )^2 ) # rmse_radius emd_radius
  
  period = intersect( which(!is.na(observation)), ( (time_window+1):length(observation) ) )
  for (t in period) {
    window_candi = observation[(t-time_window):(t-1)]
    window_nbhd = spatial_srt_ws[(t-time_window):(t-1), nbhd_label]
    spatial_estimate = c(NA,NA,NA,NA,NA,NA)
    
    if (sum(!is.na(window_candi)) < 12) {
      spatial_srt_flag[t,i] = 0
    } else {
      for (p in 1:6) {
        if (sum(!is.na(window_candi) & !is.na(window_nbhd[,p])) >= 12) {
          linear = lm(window_candi ~ window_nbhd[,p])
          window_nbhd_now = spatial_srt_ws[t,nbhd_label[p]]
          spatial_estimate[p] = window_nbhd_now * linear$coefficients[2] + linear$coefficients[1]
        }
      }
      
      estimation_srt[t] = sum( spatial_estimate * weight_srt, na.rm = TRUE ) / 
        sum( weight_srt[!is.na(spatial_estimate)] )
      
      sd_srt[t] = sd( spatial_estimate, na.rm = TRUE )
    }
  }
  
  flag_after_srt = ifelse( observation > (estimation_srt + 2*sd_srt) | 
                             observation < (estimation_srt - 2*sd_srt), 
                           1, 0 )
  obs_after_srt = ifelse( observation > (estimation_srt + 2*sd_srt) | 
                            observation < (estimation_srt - 2*sd_srt), 
                          NA, observation )
  
  estimation_srt_mat[,i] = estimation_srt
  sd_srt_mat[,i] = sd_srt
  spatial_srt_ws[,i] = obs_after_srt
  spatial_srt_flag[,i] = flag_after_srt
  print(k)
}
Sys.time()

estimation_csrt_mat = estimation_srt_mat
sd_csrt_mat = sd_srt_mat
spatial_csrt_ws = spatial_srt_ws
spatial_csrt_flag = spatial_srt_flag
##################################################











x1 = wow_ws_bc[t,i]
x2 = wow_ws_bc[t,label_nbhd_wow]
x3 = knmi_ws[t,label_nbhd_knmi]
x = cbind(x1,x2,x3)
plot(1:length(x),x)
spatial_corr_wow_knmi = cor(x = )







# extreme days
which(datetime_sequence == "2018-08-09 20:00:00 GMT") # 137053
which(datetime_sequence == "2018-08-09 21:50:00 GMT") # 137064

extreme_ws = spatial_ws[137000:137100,c(i,rmse_lable_sort[,2])]
extreme_ws_df = as.data.frame(cbind(1,extreme_ws))
colnames(extreme_ws_df)[1:2] = c('datetime','target')
extreme_ws_df$datetime = datetime_sequence[137000:137100]
extreme_ws_df$datetime = as.POSIXct(datetime_sequence[137000:137100])
ggplot(extreme_ws_df, aes(x = datetime)) +
  geom_point(aes(y = target), color = 'black') +
  geom_point(aes(y = extreme_ws_df[,3]), color = 'pink', alpha = 0.5) +
  geom_point(aes(y = extreme_ws_df[,4]), color = 'orange', alpha = 0.5) +
  geom_point(aes(y = extreme_ws_df[,5]), color = 'yellow', alpha = 0.4) +
  geom_point(aes(y = extreme_ws_df[,6]), color = 'tomato', alpha = 0.3) +
  geom_point(aes(y = extreme_ws_df[,7]), color = 'green', alpha = 0.3) +
  geom_point(aes(y = extreme_ws_df[,8]), color = 'blue', alpha = 0.3) +
  theme_bw()









# spatial_dist_wow_knmi = distm(x = cbind(knmi_nbhd_information$longitude,
#                                         knmi_nbhd_information$latitude),
#                               y = cbind(wow_station_information_bc$longitude,
#                                         wow_station_information_bc$latitude),
#                               fun = distGeo)
# spatial_dist_wow = distm(x = cbind(wow_station_information_bc$longitude,
#                                    wow_station_information_bc$latitude),
#                          y = cbind(wow_station_information_bc$longitude, 
#                                    wow_station_information_bc$latitude),
#                               fun = distGeo)

# plot KNMI and WOW in Utrecht
Utrecht_map_all = get_map(location = c(4.40000, 51.70000, 5.90000, 52.50000),
                          source = 'google', maptype = 'hybrid', crop = FALSE)
ggmap(Utrecht_map_all) + 
  geom_point(aes(x = longitude, y = latitude), data = knmi_nbhd_information, 
             alpha = 1, color="red", size = 3)  + 
  geom_point(aes(x = longitude, y = latitude), data = wow_station_information_bc,
             alpha = 1, color="purple", size = 1.2) +
  annotate('text', x = knmi_nbhd_information$longitude + 0.01, 
           y = knmi_nbhd_information$latitude + 0.005, label = 1:58, 
           colour = I('black'), size = 5) +
  annotate('text', x = wow_station_information_bc$longitude + 0.01, 
           y = wow_station_information_bc$latitude + 0.005, label = 1:28, 
           colour = I('darkred'), size = 5)
# wow 17 has coastal knmi5 nbhd, others no problem